services:
  database:
    env_file:
      - .env
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    env_file:
    - .env
    image: ${DOCKER_USERNAME}/multitune-backend:latest
    environment:
      DB_HOST: database
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
    depends_on:
      - database
    networks:
      - app-network
    ports:
    - "4000:4000"

  frontend:
    env_file:
    - .env
    image: ${DOCKER_USERNAME}/multitune-frontend:latest
    depends_on:
      - backend
    networks:
      - app-network
    expose:
    - "80"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt/live/chunted.fr/fullchain.pem:/etc/ssl/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/chunted.fr/privkey.pem:/etc/ssl/private/privkey.pem:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./apps/frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
  
  migrate:
    image: postgres:16
    volumes:
      - ./apps/backend/migrations:/migrations
    env_file:
      - .env
    entrypoint: >
      bash -c "
        for f in /migrations/*.sql; do
          psql -h database -U $POSTGRES_USER -d $POSTGRES_DB -f \"$f\";
        done
      "
    depends_on:
      - database

networks:
  app-network:

volumes:
  postgres_data:

